class TNode:
  def __init__(self, data, left = None, right = None):
    self.data = data
    self.left = left
    self.right = right
    
class BinaryTree:
  def __init__(self):
    self.root = None
  
  def preorder(self):
    self._subtreePreorder(self.root)
  
  def _subtreePreorder(self, p):
    if p is not None:
      print(p.data)
      self._subtreePreorder(p.left)
      self._subtreePreorder(p.right)
  
  def inorder(self):
    self._subtreeInorder(self.root)
  
  def _subtreeInorder(self,p):
    if p is not None:
      self._subtreeInorder(p.left)
      print(p.data)
      self._subtreeInorder(p.right)
  
  def postorder(self):
    self._subtreePostorder(self.root)
  
  def _subtreePostorder(self, p):
    if p is not None:
      self._subtreePostorder(p.left)
      self._subtreePostorder(p.right)
      print(p.data)
      
  def height(self):
    return self._subtreeHeight(self.root)
  
  #높이
  def _subtreeHeight(self, p):
    if p is None:
      return 0
    else:
      hleft = self._subtreeHeight(p.left)
      hright = self._subtreeHeight(p.right)
      return max(hleft, hright)+1
  
  #노드개수
  def size(self):
    return self._subtreeSize(self.root)
  def _subtreeSize(self, p):
    if p is None:
      return 0
    else:
      return 1+self._subtreeSize(p.left) +self._subtreeSize(p.right)
      
      
