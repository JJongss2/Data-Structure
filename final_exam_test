class MaxHeap:
    def __init__(self):
        self.heap = []

    def print(self):
        print(self.heap)

    def insert(self, value):     
        self.heap.append(value)
        i = len(self.heap) - 1
        while (i != 0 and value > self.heap[(i-1)//2]):
            self.heap[i] = self.heap[(i-1)//2]
            i = (i-1)//2
        self.heap[i] = value

    def delete(self):  #down heap
        n = len(self.heap)
        if n == 0:
            return None
        current = 0
        maxValue = self.heap[0] # 최대값 저장
        value = self.heap[n-1]  # 마지막 원소를 value에 저장
        self.heap.pop()  # 마지막 원소 삭제
        n = n - 1        # 원소 하나가 삭제되어 n을 1 줄임
        while (2*current+1 < n):   # current가 leaf가 아니면
            leftChild = 2*current + 1
            rightChild = leftChild + 1
            # 두 자식 노드 중 큰 값의 노드를 largerChild
            if rightChild < n and self.heap[rightChild] > self.heap[leftChild]:
                largerChild = rightChild
            else:
                largerChild = leftChild
                
            if value < self.heap[largerChild]: # largerChild의 값이 크면
                self.heap[current] = self.heap[largerChild]
                current = largerChild          # current를 largerChild로 내림
            else:
                break
        self.heap[current] = value
        return maxValue

#선택정렬 n**2
def selection_sort(A):
    n = len(A)
    for i in range(n-1):
        least = i
        for j in range(i+1, n):
            if A[j]<A[least]:
                least = j
        A[i], A[least] = A[least], A[i]

#삽입정렬 n**2
def insertion_sort(A):
    n = len(A)
    for i in range(1,n):
        x = A[i]
        j = i-1
        while j>=0 and A[j] > x:
            A[j+1] = A[j]
            j-=1
        A[j+1] = x

#버블정렬 n**2
def bubble_sort(A):
    n = len(A)
    for i in range(n-1, 0, -1):
        bChanged = False
        for j in range (i):
            if A[j]>A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]
                bChanged = True
        if not bChanged:
            break;


def heapify(A, i, n):  # rebuildHeap (혹은 downHeap)라고도 함 
    if n == 0:
        return None
    current = i
    value = A[i]  # 노드 i의 값을 value에 저장
    while (2*current + 1 < n):   # curren가 leaf가 아니면
# 두 자식 노드 중 큰 값의 노드를 largerChild
        leftChild = 2*current + 1
        rightChild = leftChild + 1
        # 두 자식 노드 중 큰 값의 노드를 largerChild
        if rightChild < n and A[rightChild] > A[leftChild]:
            largerChild = rightChild
        else:
            largerChild = leftChild
                
        if value < A[largerChild]: # largerChild의 값이 크면
            A[current] = A[largerChild]
            current = largerChild          # current를 largerChild로 내림
        else:
            break
    A[current] = value


def makeHeap(A):
    n = len(A)
    for i in range(n//2 -1, -1, -1):
        heapify(A, i, n)

# 힙정렬 
def heapsort(A):
    n = len(A)
# 단계 1 수행시간 n
    makeHeap(A)

# 단계 2 수행시간 n log n
    for last in range(n-1, 0, -1):
        A[last], A[0] = A[0], A[last]
        heapify(A, 0, last)

